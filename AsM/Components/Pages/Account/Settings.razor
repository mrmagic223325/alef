@page "/_Account/Settings"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using AsM.Interfaces
@using AsM.Models
@using Cassandra.Mapping
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject ICassandraDbContext Db

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
<MudTabs Outlined="true" Position="Position.Start" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
    <MudTabPanel Text="Account settings">
        <MudGrid>
            <MudItem xs="6">
                <MudTextField Label="Change username" Style="width: 100%;" Variant="Variant.Outlined" @bind-Value="Username" Counter="32" MaxLength="32" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Save" OnAdornmentClick="@(() => SaveUsername())" Placeholder="@_usernamePlaceholder" TextUpdateSuppression="false" OnKeyDown="@(e => CheckEnterField(e, "Username"))"/>
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="6">
                <style>
                    /* Don't overflow placeholder text in below MudTextField */
                    input:placeholder-shown {
                        text-overflow: ellipsis !important;
                    }
                </style>
                <MudTextField Label="Change display name" Style="width: 100%;" Variant="Variant.Outlined" @bind-Value="Displayname" Counter="32" MaxLength="32" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Save" OnAdornmentClick="@(() => SaveDisplayname())" Placeholder="@_displaynamePlaceholder" TextUpdateSuppression="false" OnKeyDown="@(e => CheckEnterField(e, "Displayname"))"/>
            </MudItem>
            <MudFlexBreak/>
            <MudItem xs="6">
                <MudTextField Label="Change email address" Variant="Variant.Outlined" @bind-Value="Email" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(ValidEmail))" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Save" OnAdornmentClick="@(() => SaveEmail())" Placeholder="@_emailPlaceholder" TextUpdateSuppression="false" OnKeyDown="@(e => CheckEnterField(e, "Email"))"/>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Other settings">
        <MudGrid>
            <MudItem>
                <MudPaper Class="align-center justify-center mud-width-full py-8">
                    <MudText Class="ml-6 mr-6">This is an instant and <u style="font-weight: bold;">permanent</u> option.<br/>Deleting an account <u style="font-weight: bold;">can not be undone</u>.</MudText>
                    <MudButton Variant="Variant.Filled" Style="margin-left: 25%;" Class="mt-3" Color="Color.Error" OnClick="@(() => throw new NotImplementedException())">Delete account</MudButton>
                </MudPaper>
                </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>
    
}


@code
{
    private bool _isLoading = true;
    private Guid _userGuid;

    private string Username { get; set; } = "";
    private string Displayname { get; set; } = "";
    private string Email { get; set; } = "";

    private string _usernamePlaceholder = "Username";
    private string _displaynamePlaceholder = "Display Name";
    private string _emailPlaceholder = "Email address";

    private class UserData
    {
        public string Username { get; set; } = "";
        public string Displayname { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            _userGuid = Guid.Parse(user.FindFirstValue("Guid"));

            var session = await Db.ConnectToKeyspaceAsync("accounts");
            if (session == null)
            {
                Snackbar.Add("Error: Could not connect to the database", Severity.Error);
                return;
            }

            IMapper mapper = new Mapper(session);
            var dbUser = await mapper.SingleOrDefaultAsync<User>("SELECT * FROM users WHERE id = ?", _userGuid);

            if (dbUser != null)
            {
                _usernamePlaceholder = dbUser.Username;
                _displaynamePlaceholder = dbUser.Displayname;
                _emailPlaceholder = dbUser.Email;
            }
            else
            {
                Snackbar.Add("Error: Could not retrieve user from database.", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"An error occurred while loading user data: {e.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SaveDisplayname()
    {
        if (string.IsNullOrWhiteSpace(Displayname) || Displayname.Length > 32)
        {
            Snackbar.Add("Display name cannot be empty or longer than 32 characters.", Severity.Warning);
            return;
        }

        try
        {
            var authModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./changesettings.js");
            var succeeded = await authModule.InvokeAsync<bool>("ChangeSettingsWithRedirect", "Displayname", Displayname, null);

            if (succeeded)
            {
                _displaynamePlaceholder = Displayname;
                Displayname = "";
                StateHasChanged();
                Snackbar.Add("Successfully changed display name", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to save setting. Please try again.", Severity.Error);
            }
        }
        catch (JSException e)
        {
            Snackbar.Add($"UI Error: Could not save setting. {e.Message}", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add($"An unexpected error occurred: {e.Message}", Severity.Error);
        }
    }

    private async Task SaveUsername()
    {
        if (string.IsNullOrWhiteSpace(Username) || Username.Length > 32)
        {
            Snackbar.Add("Username cannot be empty or longer than 32 characters.", Severity.Warning);
            return;
        }

        try
        {
            var authModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./changesettings.js");
            var succeeded = await authModule.InvokeAsync<bool>("ChangeSettingsWithRedirect", "Username", Username, null);

            if (succeeded)
            {
                _usernamePlaceholder = Username;
                Username = "";
                StateHasChanged();
                Snackbar.Add("Successfully changed username", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to save setting. Please try again.", Severity.Error);
            }
        }
        catch (JSException e)
        {
            Snackbar.Add($"UI Error: Could not save setting. {e.Message}", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add($"An unexpected error occurred: {e.Message}", Severity.Error);
        }
    }
    
    private async Task SaveEmail()
    {
        if (string.IsNullOrWhiteSpace(Email) || !new EmailAddressAttribute().IsValid(Email))
        {
            Snackbar.Add("Please enter a valid email address.", Severity.Warning);
            return;
        }

        try
        {
            var authModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./changesettings.js");
            var succeeded = await authModule.InvokeAsync<bool>("ChangeSettingsWithRedirect", "Email", Email, null);

            if (succeeded)
            {
                _emailPlaceholder = Email;
                Email = "";
                StateHasChanged();
                Snackbar.Add("Successfully changed email address", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to save setting. Please try again.", Severity.Error);
            }
        }
        catch (JSException e)
        {
            Snackbar.Add($"UI Error: Could not save setting. {e.Message}", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add($"An unexpected error occurred: {e.Message}", Severity.Error);
        }
    }

    private async Task CheckEnterField(KeyboardEventArgs ev, string field)
    {
        if (ev.Key == "Enter")
        {
            switch (field)
            {
                case "Username":
                    await SaveUsername();
                    break;
                case "Displayname":
                    await SaveDisplayname();
                    break;
                case "Email":
                    await SaveEmail();
                    break;
            }
        }
    }
    
    private static IEnumerable<string> MaxCharacters(string s)
    {
        if (!string.IsNullOrEmpty(s) && 32 < s.Length)
            yield return "Max 32 characters";
    }

    private static IEnumerable<string> ValidEmail(string s)
    {
        if (!string.IsNullOrEmpty(s) && !new EmailAddressAttribute().IsValid(s))
            yield return "Please enter a valid email address";
    }
}