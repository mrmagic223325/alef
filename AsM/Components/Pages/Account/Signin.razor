@page "/Account/Signin"

@using System.Net
@using System.Net.Mail
@using System.Security.Cryptography
@using System.Text
@using System.Text.RegularExpressions
@using Cassandra
@using FluentValidation

@inject IDialogService DialogService
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject DatabaseService DB

<AuthorizeView>
    <Authorized>
    @{
        Navigation.NavigateTo("/");
    }
    </Authorized>
</AuthorizeView>

<MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Style="width: 100%;" Centered="true">
    <MudTabPanel Text="Sign in">
        <PageTitle> Sign in to AsM</PageTitle>
        
            <MudForm Model="@_signinForm" @ref="@_signinForm" Style="width: 50%; margin: auto;">
                <MudCard>
                    <MudCardHeader>Enter your credentials to sign in</MudCardHeader>
                    <MudCardContent>
                        <!-- TODO: Allow both username and email sign in (check for at-symbol in Account) -->
                        <MudTextField Label="Username/Email" @bind-Value="_signinModel.Account" For="@(() => _signinModel.Account)"/>
                        <MudTextField Label="Password" @bind-Value="_signinModel.Password" For="@(() => _signinModel.Password)" InputType="InputType.Password" TextUpdateSuppression="false" OnKeyDown="CheckEnter"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" OnClick="@(async () => await SignIn())" Color="Color.Primary" Class="ml-auto">Sign in</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Sign up">
        <PageTitle>Sign up to AsM</PageTitle>
        
        <MudForm Model="@_signupModel" @ref="@_signupForm" Style="width: 50%; margin: auto;" Validation="@(_signupValidator.ValidateValue)" ValidationDelay="0">
            <MudCard>
                <MudCardHeader>Enter your credentials to sign in</MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Display name" HelperText="Max. 32 characters" MaxLength="32" @bind-Value="_signupModel.Displayname" For="@(() => _signupModel.Displayname)" Immediate="true"/>
                    <MudTextField Label="Username" HelperText="Max. 16 characters" MaxLength="16" @bind-Value="_signupModel.Username" For="@(() => _signupModel.Username)" Immediate="true"/>
                    <MudTextField Label="Email" Class="mt-3" @bind-Value="_signupModel.Email" For="@(() => _signupModel.Email)" Immediate="false"/>
                    <MudTextField Label="Password" Class="mt-3" HelperText="Choose a strong password" InputType="InputType.Password" @bind-Value="_signupModel.Password" For="@(() => _signupModel.Password)" Immediate="true"/>
                    <MudTextField Label="Repeat password" Class="mt-3" HelperText="Repeat the password" InputType="InputType.Password" @bind-Value="_signupModel.PasswordRepeat" For="@(() => _signupModel.PasswordRepeat)" Immediate="true"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" OnClick="@(async () => await SignUp())" Color="Color.Primary" Class="ml-auto">Sign up</MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>
    </MudTabPanel>
</MudTabs>

@code
{
    [CascadingParameter] public HttpContext Context { get; set; } = default!;

    MudForm _signinForm = null!;
    MudForm _signupForm = null!;

    readonly SignUpModelValidator _signupValidator = new();

    readonly SigninForm _signinModel = new();
    readonly SignupForm _signupModel = new();
    
    private async Task CheckEnter(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
            await SignIn();
    }
    
    public class SignUpModelValidator : AbstractValidator<SignupForm>
    {
        public SignUpModelValidator()
        {
            RuleFor(x => x.Displayname).Cascade(CascadeMode.Stop).NotEmpty().MaximumLength(32).WithMessage("Displayname can not be longer than 32 characters.");
            RuleFor(x => x.Email).Cascade(CascadeMode.Stop).NotEmpty().EmailAddress().MustAsync(async (v, _) => await CheckEmail(v)).WithMessage("Email address is already used.");
            RuleFor(x => x.Username).Cascade(CascadeMode.Stop).NotEmpty().MaximumLength(16).WithMessage("Username must be 16 characters or less").MustAsync(async (v, _) => await CheckUsername(v)).WithMessage("Username is already taken.");
            RuleFor(x => x.Password).Cascade(CascadeMode.Stop).NotEmpty().MinimumLength(8).WithMessage("Password must be at least 8 characters long.").Matches(new Regex("[A-Z]")).WithMessage("Password must include at least one uppercase character.").Matches(new Regex("[a-z]")).WithMessage("Password must include at least one lowercase character").Matches(new Regex("[0-9]")).WithMessage("Password must include at least one digit.").Matches(@"[][""!@$%^&*(){}:;<>,.?/+_=|'~\\-]").WithMessage("Password must include at least one symbol.");
            RuleFor(x => x.PasswordRepeat).Cascade(CascadeMode.Stop).NotEmpty().Equal(x => x.Password).WithMessage("Passwords do not match");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, property) =>
        {
            var r = await ValidateAsync(ValidationContext<SignupForm>.CreateWithOptions((SignupForm)model, x => x.IncludeProperties(property)));
            if (r.IsValid)
                return Array.Empty<string>();
            return r.Errors.Select(e => e.ErrorMessage);
        };
    }

    private static async Task<bool> CheckEmail(string v)
    {
        var cluster = Cluster.Builder().AddContactPoint(Environment.GetEnvironmentVariable("IS_DOCKER") == "true" ? "cassandra" : "localhost").Build();
        var session = await cluster.ConnectAsync("accounts");

        try
        {
            var statement = await session.PrepareAsync("SELECT count(*) FROM accounts.users WHERE email = ? ALLOW FILTERING;");
            var res = await session.ExecuteAsync(statement.Bind(v));

            if (res.First().GetValue<Int64?>("count") != 0)
            {
                return false;
            }

            return true;
        }
        finally
        {
            await session.ShutdownAsync();
            await cluster.ShutdownAsync();
        }
    }

    private static async Task<bool> CheckUsername(string v)
    {
        var cluster = Cluster.Builder().AddContactPoint(Environment.GetEnvironmentVariable("IS_DOCKER") == "true" ? "cassandra" : "localhost").Build();
        var session = await cluster.ConnectAsync("accounts");

        try
        {
            var statement = await session.PrepareAsync("SELECT count(*) FROM accounts.users WHERE username = ? ALLOW FILTERING;");
            var res = await session.ExecuteAsync(statement.Bind(v));

            if (res.First().GetValue<Int64?>("count") != 0)
            {
                return false;
            }

            return true;
        }
        finally
        {
            await session.ShutdownAsync();
            await cluster.ShutdownAsync();
        }
    }
    
    public class SignupForm
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Displayname { get; set; } = string.Empty;

        public string Username { get; set; } = string.Empty;
        
        public string Email { get; set; } = string.Empty;
        
        public string Password { get; set; } = string.Empty;
        
        public string PasswordRepeat { get; set; } = string.Empty;
    }
    
    public class SigninForm
    {
        public string Account { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private Task OpenEmailDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, BackdropClick = false };

        var p = new DialogParameters<EmailDialog>()
        {
            { x => x.Address, _signupModel.Email },
            { x => x.Id, _signupModel.Id }
        };
        return DialogService.ShowAsync<EmailDialog>("Confirm email address", p ,options);
    }

    private async Task SignIn()
    {
        var d = DotNetObjectReference.Create(this);
        var authModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./auth.js");
        await authModule.InvokeVoidAsync("SignIn", d, _signinModel.Account, _signinModel.Account, _signinModel.Password, "/");
    }

    [JSInvokable]
    public void ValidationErrors(string json)
    {
        Console.WriteLine(json);
        if (string.IsNullOrEmpty(json))
            Navigation.NavigateTo("/");
    }
    
    private async Task SignUp()
    {
        await _signupForm.Validate();
        
        if (_signupForm.IsValid)
        {
            _signupModel.Username = _signupModel.Username.ToLower();
            await DB.CreateUser(_signupModel);
            await DB.InsertPassword(_signupModel.Id, _signupModel.Password);
            await SendEmail(_signupModel.Email);

            var authModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./auth.js");
            await authModule.InvokeVoidAsync("SignIn", _signupModel.Username, _signupModel.Email, _signupModel.Password, false);
            await OpenEmailDialog();
        }
    }

    private async Task<bool> SendEmail(string email)
    {
        var x = Enumerable.Range('a', 'z' - 'a' + 1).Select(i => (char)i).ToList();
        x.AddRange(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']);
            
        var code = RandomNumberGenerator.GetString(x.ToArray().AsSpan(), 8);
        
        SmtpClient client = new SmtpClient()
        {
            UseDefaultCredentials = true,
            Host = Configuration["Mail:Host"]!,
            Port = int.Parse(Configuration["Mail:Port"]!),
            EnableSsl = false,
            Credentials = new NetworkCredential(Configuration["Mail:Credentials:Username"], Configuration["Mail:Credentials:Password"]),
        };
        
        MailAddress from = new(Configuration["Mail:Address"]!, Configuration["Mail:Name"]);
        MailAddress to = new(_signupModel.Email, _signupModel.Displayname);
        
        
        MailMessage message = new MailMessage(from, to)
        {
            Subject = "Confirm Your AsM Account",
            SubjectEncoding = Encoding.UTF8,
            
            Body = $"{code}",
            BodyEncoding = Encoding.UTF8,
            
            HeadersEncoding = Encoding.UTF8,
            IsBodyHtml = true,
            AlternateViews = { AlternateView.CreateAlternateViewFromString("Z") },
            Priority = MailPriority.High,
        };

        try
        {
            var cluster = Cluster.Builder().AddContactPoint(Environment.GetEnvironmentVariable("IS_DOCKER") == "true" ? "cassandra" : "localhost").Build();
            var session = await cluster.ConnectAsync("accounts");

            try
            {
                var statement = await session.PrepareAsync("INSERT INTO accounts.email_verification (id, email) VALUES (?, ?)");
                await session.ExecuteAsync(statement.Bind(code, email));
            }
            finally
            {
                await session.ShutdownAsync();
                await cluster.ShutdownAsync();
            }

            client.Send(message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            client.Dispose();
            message.Dispose();
        }
        return true;
    }
}
