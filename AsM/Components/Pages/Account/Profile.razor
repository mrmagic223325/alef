@page "/{Username}"
@using System.Security.Claims
@using AsM.Interfaces
@using Serilog

@inject ICassandraDbContext Db
@inject AuthenticationStateProvider Auth
@inject NavigationManager Navigation
@inject IDialogService Dialog
@inject IUserService UserService

@if (_isLoading)
{
    <MudGrid Class="d-flex justify-center mt-16">
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    </MudGrid>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <MudGrid Class="d-flex justify-center mt-16">
        <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
    </MudGrid>
}
else
{
    <MudCard Elevation="0" Class="mud-width-full">
        @if (_loadedUsername == authState.User.Identity.Name)
        {
            <MudLink OnClick="OpenBannerPictureUpdateDialog" Underline="Underline.None" Color="Color.Inherit" Class="d-flex" Style="cursor: pointer;">
                <MudImage Src=@_bannerPicturePath Alt="Profile banner" Fluid="true" Style="width: 100%;"></MudImage>
            </MudLink>
        }
        else
        {
            <MudImage Src=@_bannerPicturePath Alt="Profile banner" Fluid="true"></MudImage>
        }
        
        <MudGrid Justify="Justify.Center" Spacing="0" Class="px-4 pb-4">

            <style>
                .profile-avatar-responsive-size
                {
                    width: 7rem  !important;
                    height: 7rem !important;
                }
                
                @@media (min-width: 600px)
                {
                .profile-avatar-responsive-size
                {
                    width: 10rem !important;
                    height: 10rem !important;
                }
                }

                .avatar-section-responsive-mt
                {
                    margin-top: -3rem !important;
                }

                .edit-button-responsive-mt
                {
                    margin-top: 4rem !important;
                }

                @@media (min-width: 600px)
                {
                .avatar-section-responsive-mt
                {
                    margin-top: -5rem !important;
                }
                    .edit-button-responsive-mt    
                    {
                        margin-top: 5.5rem !important;
                    }
                }
            </style>

            <MudItem xs="12" Class="d-flex align-items-start justify-space-between avatar-section-responsive-mt">

                @if (_loadedUsername == authState.User.Identity.Name)
                {
                    <MudLink OnClick="OpenProfilePictureUpdateDialog" Underline="Underline.None" Color="Color.Inherit" Class="d-flex" Style="cursor: pointer;">
                        <MudAvatar Class="profile-avatar-responsive-size" Variant="Variant.Outlined">
                            <MudImage Src=@_profilePicturePath></MudImage>
                        </MudAvatar>
                    </MudLink>
                }
                else
                {
                    <MudAvatar Size="Size.Large" Variant="Variant.Outlined" Class="profile-avatar-responsive-size">
                        <MudImage Src=@_profilePicturePath></MudImage>
                    </MudAvatar>
                }


                @if (_loadedUsername == authState.User.Identity.Name)
                {
                    <MudFab Class="edit-button-responsive-mt" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Edit" OnClick='() => Navigation.NavigateTo("/_Account/Settings")'></MudFab>
                }
            </MudItem>

            <MudItem xs="12" Class="text-center mt-2">
                <MudText Typo="Typo.h5" Color="Color.Primary">@_loadedDisplayname</MudText>
                <MudText Typo="Typo.subtitle1" Class="mt-n1">@@@_loadedUsername</MudText>
                <MudText Typo="Typo.subtitle2" Class="mt-2">about me!<br/>1<br/>2<br/>3</MudText>
            </MudItem>
        </MudGrid>
    </MudCard>
}

@code
{
    AuthenticationState authState { get; set; }
    
    private bool _isLoading;
    private string? _errorMessage;

    [Parameter] public string Username { get; set; }

    private string _loadedUsername = "";
    private string _loadedDisplayname = "";
    private string _profilePicturePath = "";
    private string _bannerPicturePath = "";
    
    private Task OpenBannerPictureUpdateDialog()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, BackdropClick = false, MaxWidth = MaxWidth.Medium, FullWidth = true };
        return Dialog.ShowAsync<UpdateBanner>("Update Banner Picture", options);
    }
    
    private Task OpenProfilePictureUpdateDialog()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, BackdropClick = false };
        return Dialog.ShowAsync<UpdateProfilePicture>("Update Profile Picture", options);
    }
    
    protected override async void OnParametersSet()
    {
        if (_loadedUsername != Username || string.IsNullOrEmpty(_loadedUsername))
            await LoadProfileAsync();
    }

    private async Task LoadProfileAsync()
    {
        _isLoading = true;
        _errorMessage = null;

        if (string.IsNullOrEmpty(Username))
        {
            _errorMessage = "No user profile specified.";
            _isLoading = false;
            StateHasChanged();
            return;
        }

        try
        {
            var user = await Db.GetUserByUsernameAsync(Username);

            if (user is null)
            {
                _errorMessage = $"404 User {Username} Not Found.";
                _isLoading = false;
                StateHasChanged();
                return;
            }

            authState = await Auth.GetAuthenticationStateAsync();
            
            if (authState.User.Identity.IsAuthenticated)
            {
                _profilePicturePath = $"/profile_pictures/{authState.User.FindFirstValue("Guid")}.webp";
                _bannerPicturePath = $"/banner_pictures/{authState.User.FindFirstValue("Guid")}.webp";
            }
            else
            {
                var uuid = await UserService.GetUserAsync(Username);
                _profilePicturePath = $"/profile_pictures/{uuid.Id}.webp";
                _bannerPicturePath = $"/banner_pictures/{uuid.Id}.webp";
            }


	    if (!Path.Exists("/root/AsM/AsM/wwwroot" + _profilePicturePath))
	      _profilePicturePath = "/profile_pictures/default.webp";

	    if (!Path.Exists("/root/AsM/AsM/wwwroot" + _bannerPicturePath))
	      _bannerPicturePath = "/banner_pictures/default.webp";

            _loadedUsername = user.Username;
            _loadedDisplayname = user.Displayname;
            _isLoading = false;
            StateHasChanged();
            
            // TODO: Get about me
            // TODO: Get profile picture
            // TODO: Get banner
        }
        catch (Exception e)
        {
            Log.Error(e.Message);
            _errorMessage = $"An error occurred while loading the profile for {Username}.";
            _isLoading = false;
            StateHasChanged();
        }
    }
}
