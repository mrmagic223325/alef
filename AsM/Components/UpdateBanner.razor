@using System.Security.Claims
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Webp
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject AuthenticationStateProvider Auth
@inject NavigationManager Navigation

<MudDialog>
    <TitleContent>
        Update Banner
    </TitleContent>
    <DialogContent>
        <MudGrid Justify="Justify.Center">
            <MudItem xs=4 Class="d-flex justify-content-center">
                <MudImage Width="300" Height="150" Src=@_bannerPicturePath></MudImage>
            </MudItem>
            
            <MudItem xs=4 Class="d-flex justify-content-center justify-center align-center">
                <MudIcon Icon="@Icons.Material.TwoTone.East" Size="Size.Large" Color="Color.Inherit" />
            </MudItem>
            
            <MudItem xs=4 Class="d-flex justify-content-center">
            
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .webp" FilesChanged="UploadPicture" MaximumFileCount="1" Style="cursor: pointer;">
                    <ActivatorContent>
                        @if (imageUrl is not null)
                        {
                            <MudImage Width="300" Height="150" Class="border border-solid" Src="@imageUrl"></MudImage>
                        }
                        else
                        {
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="290px" Height="150px"></MudSkeleton>
                        }
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
        </MudGrid>
        
        @if (_tooBig)
        {
            <MudAlert Severity="Severity.Error">Selected file too big. Maximum 20 MB.</MudAlert>
        }

    </DialogContent>
    <DialogActions>
        <MudGrid Justify="Justify.SpaceBetween">
            <MudItem>
                <MudButton OnClick="Cancel">Cancel</MudButton>
            </MudItem>
            
            <MudItem>
                <MudButton OnClick="Change" Color="Color.Primary">Change</MudButton>
            </MudItem>
        </MudGrid>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private string? _filePath;
    private IBrowserFile? _file;
    private string? imageUrl;
    private string _bannerPicturePath = "";
    private bool _tooBig;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await Auth.GetAuthenticationStateAsync();
            var userGuid = authState.User.FindFirstValue("Guid");
            if (userGuid != null)
            {
                _bannerPicturePath = $"/banner_pictures/{userGuid}.webp";
		
                if (!Path.Exists("/root/AsM/AsM/wwwroot" + _bannerPicturePath))
		  _bannerPicturePath = "/banner_pictures/default.webp";
            }
            else
            {
                Console.WriteLine("User ID not found.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            MudDialog.Cancel();
        }

        await base.OnInitializedAsync();
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Change()
    {
        // Should not be possible but just to make sure.
        if (_file.Size > 25000000)
        {
            _tooBig = true;
            StateHasChanged();
            return;
        }
        await using var stream = _file.OpenReadStream(maxAllowedSize: 25000000);
        using Image image = await Image.LoadAsync(stream);
        var encoder = new WebpEncoder
        {
            Quality = 100,
            FileFormat = WebpFileFormatType.Lossy,
            Method = 0,
            NearLossless = false,
            SkipMetadata = true,
            TransparentColorMode = WebpTransparentColorMode.Clear
        };
        
        await image.SaveAsync(_filePath + ".webp", encoder);
        Navigation.Refresh(true);
    }
    
    private async void UploadPicture(IBrowserFile? file)
    {
        if (file is null)
            return;

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                if (file.Size > 25000000)
                {
                    _tooBig = true;
                    StateHasChanged();
                    return;
                }
                await file.OpenReadStream(maxAllowedSize: 25000000).CopyToAsync(memoryStream);
                var base64 = Convert.ToBase64String(memoryStream.ToArray());
                imageUrl = $"data:{file.ContentType};base64,{base64}";
            }
            
            // TODO: Set better directory
            var uploads = Path.Combine("/root/AsM/AsM/wwwroot", "banner_pictures");
            if (!Directory.Exists(uploads))
            {
                Directory.CreateDirectory(uploads);
            }

            var auth = await Auth.GetAuthenticationStateAsync();
            var uuid = auth.User.FindFirstValue("Guid");
            var path = Path.Combine(uploads, uuid);
            
            _filePath = path;
            _file = file;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
